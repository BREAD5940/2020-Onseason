import libjevois as jevois
import json
import time
import cv2
import numpy as np


class WhiteTape:

    def __init__(self):
        self.grip_pipeline = GripPipeline()

        self.fov = 120

        self.lines = None
        self.line_angles = None

    def undistort(self, inimg):
        if not hasattr(self, 'fisheye_maps'):
            width = inimg.shape[1]
            height = inimg.shape[0]

            distCoeff = np.zeros((4, 1), np.float64)

            # TODO: add your coefficients here!
            k1 = -2.2e-3;  # negative to remove barrel distortion
            k2 = 0.0;
            p1 = 0.0;
            p2 = 0.0;

            distCoeff[0, 0] = k1;
            distCoeff[1, 0] = k2;
            distCoeff[2, 0] = p1;
            distCoeff[3, 0] = p2;
            self.distCoeff = distCoeff

            # assume unit matrix for camera
            cam = np.eye(3, dtype=np.float32)

            cam[0, 2] = width / 2.0  # define center x
            cam[1, 2] = height / 2.0  # define center y
            cam[0, 0] = 40.  # define focal length x
            cam[1, 1] = 40.  # define focal length y
            self.cam = cam

        return cv2.undistort(inimg,self.cam,self.distCoeff)

    def processAndSend(self, source0):
        timestamp = time.time()
        self.grip_pipeline.process(source0)
        height, width, _ = source0.shape
        self.lines = []
        self.line_angles = []
        line_angles_json = []

        for contour in self.grip_pipeline.convex_hulls_output:
            rotated_rect = cv2.minAreaRect(contour)
            box = cv2.boxPoints(rotated_rect)  # cv2.boxPoints(rect) for OpenCV 3.x
            box = np.int0(box)
            [vx, vy, _, _] = cv2.fitLine(box, cv2.DIST_L2, 0, 10.0, 10.0)

            w, h = rotated_rect[1]
            x, y = rotated_rect[0]
            if w > h:
                h = w

            h = h / 2

            end_point_1 = (x + vx * h, y + vy * h)
            end_point_2 = (x - vx * h, y - vy * h)

            end_angles_1 = self.calc_angles(source0, end_point_1)
            end_angles_2 = self.calc_angles(source0, end_point_2)

            self.lines.append((end_point_1, end_point_2))
            self.line_angles.append((end_angles_1, end_angles_2))

            line_angles_json.append({
                "one": {
                    "h": end_angles_1[0],
                    "v": end_angles_1[1]
                },
                "two": {
                    "h": end_angles_2[0],
                    "v": end_angles_2[1]
                }
            })

        # jevois.sendSerial(json.dumps({"Epoch Time": timestamp, "Targets": line_angles_json}))

    def calc_angles(self, img, point):
        height, width, _ = img.shape
        horizontal_fov = self.fov
        vertical_fov = horizontal_fov / width * height

        norm_point = (
            (point[0] * 2 - width) / width,
            (point[1] * 2 - height) / height
        )

        return (
            -norm_point[0] * horizontal_fov / 2,
            -norm_point[1] * vertical_fov / 2
        )

    # Process function with no USB output
    def processNoUSB(self, inframe):
        inimg = self.undistort(inframe.getCvBGR())
        self.processAndSend(inimg)

    # Process function with USB output
    def process(self, inframe, outframe):
        inimg = self.undistort(inframe.getCvBGR())
        self.processAndSend(inimg)

        outimg = inimg.copy()

        for idx, line in enumerate(self.lines):
            angles = self.line_angles[idx]
            cv2.line(outimg, line[0], line[1], 255, 2)
            cv2.putText(outimg, "V:" + str(angles[0][0]) + " H:" + str(angles[0][1]), line[0],
                        cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 255))
            cv2.putText(outimg, "V:" + str(angles[1][0]) + " H:" + str(angles[1][1]), line[1],
                        cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 255))

        outframe.sendCv(outimg)


class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__hsl_threshold_hue = [0.0, 180.0]
        self.__hsl_threshold_saturation = [0.0, 255.0]
        self.__hsl_threshold_luminance = [133.00359712230215, 255.0]

        self.hsl_threshold_output = None

        self.__find_contours_input = self.hsl_threshold_output
        self.__find_contours_external_only = False

        self.find_contours_output = None

        self.__filter_contours_contours = self.find_contours_output
        self.__filter_contours_min_area = 0.0
        self.__filter_contours_min_perimeter = 0.0
        self.__filter_contours_min_width = 16.0
        self.__filter_contours_max_width = 1000.0
        self.__filter_contours_min_height = 0.0
        self.__filter_contours_max_height = 1000.0
        self.__filter_contours_solidity = [90.10791366906474, 100]
        self.__filter_contours_max_vertices = 1000000.0
        self.__filter_contours_min_vertices = 0.0
        self.__filter_contours_min_ratio = 0.0
        self.__filter_contours_max_ratio = 10000.0

        self.filter_contours_output = None

        self.__convex_hulls_contours = self.filter_contours_output

        self.convex_hulls_output = None

    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSL_Threshold0:
        self.__hsl_threshold_input = source0
        (self.hsl_threshold_output) = self.__hsl_threshold(self.__hsl_threshold_input, self.__hsl_threshold_hue,
                                                           self.__hsl_threshold_saturation,
                                                           self.__hsl_threshold_luminance)

        # Step Find_Contours0:
        self.__find_contours_input = self.hsl_threshold_output
        (self.find_contours_output) = self.__find_contours(self.__find_contours_input,
                                                           self.__find_contours_external_only)

        # Step Filter_Contours0:
        self.__filter_contours_contours = self.find_contours_output
        (self.filter_contours_output) = self.__filter_contours(self.__filter_contours_contours,
                                                               self.__filter_contours_min_area,
                                                               self.__filter_contours_min_perimeter,
                                                               self.__filter_contours_min_width,
                                                               self.__filter_contours_max_width,
                                                               self.__filter_contours_min_height,
                                                               self.__filter_contours_max_height,
                                                               self.__filter_contours_solidity,
                                                               self.__filter_contours_max_vertices,
                                                               self.__filter_contours_min_vertices,
                                                               self.__filter_contours_min_ratio,
                                                               self.__filter_contours_max_ratio)

        # Step Convex_Hulls0:
        self.__convex_hulls_contours = self.filter_contours_output
        (self.convex_hulls_output) = self.__convex_hulls(self.__convex_hulls_contours)

    @staticmethod
    def __hsl_threshold(input, hue, sat, lum):
        """Segment an image based on hue, saturation, and luminance ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max luminance.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HLS)
        return cv2.inRange(out, (hue[0], lum[0], sat[0]), (hue[1], lum[1], sat[1]))

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if (external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        contours, hierarchy = cv2.findContours(input, mode=mode, method=method)
        return contours

    @staticmethod
    def __filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
                          min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                          min_ratio, max_ratio):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x, y, w, h = cv2.boundingRect(contour)
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            solid = 100 * area / cv2.contourArea(hull)
            if (solid < solidity[0] or solid > solidity[1]):
                continue
            if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                continue
            ratio = (float)(w) / h
            if (ratio < min_ratio or ratio > max_ratio):
                continue
            output.append(contour)
        return output

    @staticmethod
    def __convex_hulls(input_contours):
        """Computes the convex hulls of contours.
        Args:
            input_contours: A list of numpy.ndarray that each represent a contour.
        Returns:
            A list of numpy.ndarray that each represent a contour.
        """
        output = []
        for contour in input_contours:
            output.append(cv2.convexHull(contour))
        return output
